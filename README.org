* Dmitry Sidyuk's MEPhI programming homeworks

This file provides a brief descriptions of each homework.

** Disclaimer

I do not guarantee that all homework is done at least somewhat correctly, if you find an inaccuracy, please create a pull request ðŸ«¶

** Navigation
- [[#for-nix-users][For Nix users]]
- [[#numerical-methods][Numerical Methods]]
  - [[#1-machine-units][Machine Units]]
- [[#engineering-computing][Engineering Computing]]
  - [[#1-coming-soon][Coming Soon...]]

** For Nix users

If you are using NixOS or at least the Nix package manager, you are in luck. Each project comes with a flake that handles everything involved in the ~build~ and ~run~ steps.

Just execute:

#+begin_src shell
nix <command> github:seajoyer/SupCo#<program name>
#+end_src shell

Where the ~<command>~ is:

- ~run~ to build & run a C++ program
- ~build~ to just build a C++ program (works weird yet)

And the ~<program name>~ stands for a certain program of each project (see sections below).

For example, to run a C++ implementation of the [[#1-machine-units][Machine Units]] homework, you would do:
#+begin_src shell
nix run github:seajoyer/SupCo#machine_units-cpp
#+end_src shell

There are also a fully set up development shells with all the necessary dependencies:
#+begin_src shell
nix develop github:seajoyer/SupCo#<program name>
#+end_src shell

Keep in mind that Nix isnâ€™t limited to NixOS -- you can install it on almost any system. Running the install script from https://nixos.org/download/ is a quick and easy way to get involved.

** Numerical Methods

*** 1. [[Machine_units][Machine Units]]

Provides C++ and Python programs to determine machine epsilon, the maximum (giant), and minimum (dwarf) possible values of a floating-point number of different precisions.

Nix available program names:
- ~machine_units-cpp~ a C++ program
- ~machine_units-py~ a Python program

** Engineering Computing

*** 1. [[https://www.youtube.com/watch?v=dQw4w9WgXcQ][Coming soon...]]
