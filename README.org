* Dmitry Sidyuk's MEPhI programming homeworks

This file provides a brief descriptions of each homework.

** Disclaimer

I do not guarantee that any homework is done at least somewhat correctly, if you find an inaccuracy, please create a pull request ðŸ«¶

** Navigation
- [[#for-nix-users][For Nix users]]
- [[#numerical-methods][Numerical Methods]]
  - [[#1-machine-units][Machine Units]]
  - [[#2-interpolation][Interpolation]]
  - [[#3-numerical-derivatives][Numerical Derivatives]]
  - [[#4-numerical-integration][Numerical Integration]]
  - [[#5-nonlinear-solver][Nonlinear Solver]]
  - [[#6-cauchy-problem][Cauchy Problem]]
  - [[#7-boundary-problem][Boundary Problem]]
  - [[#8-wave-equation][Wave Equation]]
  - [[#9-thermal-equation][Thermal Equation]]
- [[#engineering-computing][Engineering Computing]]
  - [[#1-argument-search][Argument Search]]
  - [[#2-vector-structure][Vector Structure]]
  - [[#3-dynamic-matrix][Dynamic Matrix]]
  - [[#4-doubly-linked-list][Doubly Linked List]]

** For Nix users

If you are using NixOS or at least the Nix package manager, you are in luck. Each project comes with a flake that handles everything involved in the ~build~ and ~run~ steps. There are also a fully set up development shells with all the necessary dependencies for each project.

Keep in mind that Nix isnâ€™t limited to NixOS -- you can install it on almost any system. Running the install script from https://nixos.org/download/ is a quick and easy way to get involved.

** Numerical Methods

*** 1. [[https://github.com/seajoyer/Machine_units][Machine Units]]

Provides C++ and Python programs to determine machine epsilon, the maximum (giant), and minimum (dwarf) possible values of a floating-point number of different precisions.

*** 2. [[https://github.com/seajoyer/Interpolation][Interpolation]]

The project offers C++ and Python implementations of Lagrange interpolation, packaged as shared libraries. It also includes plotting modules for visualizing the results. You can choose to distribute the interpolation nodes either evenly (equidistantly) or using Chebyshev nodes for improved accuracy.

*** 3. [[https://github.com/seajoyer/Numerical_Derivatives][Numerical Derivatives]]

This project allows to calculate numerical derivatives in Python and C++, providing left, center, right, and asymmetric derivatives with varying precision.

*** 4. [[https://github.com/seajoyer/Numerical_integration][Numerical Integration]]

This project implements Numerical Integration in C++ and Python by such methods as rectangle (left, right and mid rectangles), trapezoid and Simpson.

*** 5. [[https://github.com/seajoyer/Nonlinear_Solver][Nonlinear Solver]]

The project implements Newton's and bisection methods to find the root of a nonlinear equation in a given interval.

*** 6. [[https://github.com/seajoyer/Cauchy_problem][Cauchy Problem]]

A collection of libraries for solving second-order ordinary differential equations (ODEs) using various numerical methods, including Runge-Kutta 4th order, Euler, and Adams 3rd order methods.

*** 7. [[https://github.com/seajoyer/Boundary_problem][Boundary Problem]]

A numerical solver for boundary value problems of second-order ordinary differential equations using the finite difference method.

*** 8. [[https://github.com/seajoyer/Wave_equation][Wave equation]]

A numerical solver for a wave equation with mixed boundary conditions. The solver includes both first and second-order accuracy methods and compares numerical solutions with the exact solution.

*** 9. [[https://github.com/seajoyer/Thermal_equation][Thermal equation]]

A numerical solver for a non-homogeneous heat equation with mixed boundary conditions. The solver implements both first and second-order accuracy methods using the Thomas algorithm (tridiagonal matrix algorithm), and provides visualization tools to compare numerical solutions with the exact solution. Includes animated visualization of the solution evolution over time.

** Engineering Computing

*** 1. [[https://github.com/seajoyer/Argument_search][Argument Search]]

Offers a C++ program that searches for the first occurrence of a specified number (both integers and floating-point) and specific strings within the command-line arguments. The search targets are provided via the command-line interface.

*** 2. [[https://github.com/seajoyer/Vector_structure][Vector structure]]

Implements a 2-dimensional vector as a structure with several overloaded operators and convenient methods.

*** 3. [[https://github.com/seajoyer/Dynamic_matrix][Dynamic Matrix]]

Offers a dynamic matrix structure in C++ with support for 3D vector operations. It provides a flexible and efficient way to work with matrices of varying sizes, along with comprehensive unit tests to ensure reliability.

*** 4. [[https://github.com/seajoyer/Doubly_Linked_List][Doubly Linked List]]

Implements a doubly linked list data structure in C++, providing a flexible and efficient way to work with linked lists, along with comprehensive unit tests.
